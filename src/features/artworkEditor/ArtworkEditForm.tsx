import SelectWithLabel from 'components/SelectWithLabel';
import TextField from 'components/TextField';
import { CATEGORIES, CURRENCIES, STATUSES } from 'constants/artworks';
import useForm from 'features/core/hooks/useForm';
import React, { Fragment, useEffect } from 'react';
import NumberFormat from 'react-number-format';
import { EditForm, FieldWrapper, FormRow, ToggleWrapper } from './styled';

const PriceField = (props) => (
  <NumberFormat
    label="Price"
    thousandSeparator
    customInput={TextField}
    decimalScale={2}
    isNumericString
    allowNegative={false}
    {...props}
  />
);

const DimensionField = (props) => (
  <NumberFormat
    thousandSeparator
    customInput={TextField}
    decimalScale={2}
    isNumericString
    allowNegative={false}
    {...props}
  />
);

const YearField = (props) => <NumberFormat customInput={TextField} allowNegative={false} {...props} />;

const convertDimensionTo = (metric, dimension) => {
  if (!dimension) return '';
  if (metric === 2) return `${Number(dimension) / 2.54}`;
  return `${Number(dimension) * 2.54}`;
};

const constraints = {
  price: {
    length: {
      maximum: 12,
      message: '^Ensure that there are no more than 12 digits before the decimal point.',
    },
  },
  password: {
    presence: {
      allowEmpty: false,
      message: '^field is required',
    },
  },
};

const ArtworkEditForm = ({ artwork, onChange }) => {
  const { formState, errors, handleChange, handleSelectChange } = useForm(
    {
      title: artwork.title || '',
      year: artwork.year || '',
      category: artwork.category || '',
      sub_category: artwork.sub_category || '',
      height: artwork.height || '',
      width: artwork.width || '',
      depth: artwork.depth || '',
      edition: artwork.edition || '',
      status: artwork.status || '',
      price: artwork.price || '',
      current_location: artwork.current_location || '',
    },
    constraints,
  );

  useEffect(() => {
    console.log('form changed', formState);
    onChange(formState);
  }, [formState]);

  const categories = Object.values(CATEGORIES);
  const statuses = Object.values(STATUSES);
  const currency = CURRENCIES[artwork.artist_data.currency].label;
  var title = formState.title;
  /*
    '[Not Titled]' is generated by Marcel when an artist
    uploads multiple artworks at once. Here we ignore it so the user is
    intigated to type a new one.
    */
  if (title === '[Not Titled]') title = '';

  return (
    <Fragment>
      <EditForm>
        <FormRow>
          <FieldWrapper basis="80%" marginRight="0.5rem">
            <TextField
              label="Title"
              placeholder="An Awesome Title"
              value={title}
              name="title"
              onChange={handleChange}
              // error={Boolean(errors.title)}
              // errorText={errors.title}
              id="artworkTitle"
            />
          </FieldWrapper>
          <FieldWrapper basis="20%">
            <YearField
              label="Year"
              placeholder="2017"
              value={formState.year}
              name="year"
              onChange={handleChange}
              // error={Boolean(errors.year)}
              // errorText={errors.year}
            />
          </FieldWrapper>
        </FormRow>
        <FormRow>
          <SelectWithLabel
            label="Category"
            name="category"
            onChange={handleSelectChange('category')}
            value={formState.category ? CATEGORIES[formState.category] : {}}
            options={categories}
            placeholder="Painting"
            isClearable
            // error={Boolean(errors.category)}
            // errorText={errors.category}
          />
        </FormRow>
        <FormRow>
          <TextField
            label="Sub-Category"
            placeholder="Oil color"
            value={formState.sub_category}
            name="sub_category"
            onChange={handleChange}
            // error={Boolean(errors.sub_category)}
            // errorText={errors.sub_category}
          />
        </FormRow>
        <FormRow>
          <FieldWrapper basis="30%" marginRight="0.5rem">
            <DimensionField
              label="Height"
              placeholder="50"
              value={formState.height}
              name="height"
              onValueChange={handleSelectChange('height')}
              // error={Boolean(errors.height)}
              // errorText={errors.height}
            />
          </FieldWrapper>
          <FieldWrapper basis="30%" marginRight="0.5rem">
            <DimensionField
              label="Width"
              placeholder="120"
              value={formState.width}
              name="width"
              onValueChange={handleSelectChange('width')}
              // error={Boolean(errors.width)}
              // errorText={errors.width}
            />
          </FieldWrapper>
          <FieldWrapper basis="30%" marginRight="0.5rem">
            <DimensionField
              label="Depth"
              placeholder="5"
              value={formState.depth}
              name="depth"
              onValueChange={handleSelectChange('depth')}
              // error={Boolean(errors.depth)}
              // errorText={errors.depth}
            />
          </FieldWrapper>
          <FieldWrapper basis="10%">
            <ToggleWrapper>
              {/* <Toggle
                            checked={metricToggleOn}
                            onChange={this.handleToggleChange}
                            rightLabel="in"
                            leftLabel="cm"
                        /> */}
            </ToggleWrapper>
          </FieldWrapper>
        </FormRow>
        <FormRow>
          <TextField
            label="Edition"
            placeholder="Edition"
            value={formState.edition}
            name="edition"
            onChange={handleChange}
            // error={Boolean(errors.edition)}
            // errorText={errors.edition}
          />
        </FormRow>
        <FormRow>
          <SelectWithLabel
            label="Status"
            value={formState.status ? STATUSES[formState.status] : {}}
            name="status"
            onChange={handleSelectChange('status')}
            options={statuses}
            isClearable
            placeholder="Status"
            // error={Boolean(errors.status)}
            // errorText={errors.status}
          />
        </FormRow>
        <FormRow>
          <FieldWrapper basis="50%" marginRight="0.5rem">
            <PriceField
              placeholder={`${currency}540.00`}
              prefix={currency}
              value={formState.price}
              name="price"
              onValueChange={handleSelectChange('price')}
              // error={Boolean(errors.price)}
              // errorText={errors.price}
            />
          </FieldWrapper>
          <FieldWrapper basis="50%">
            <TextField
              label="Location"
              value={formState.current_location}
              name="current_location"
              onChange={handleChange}
              placeholder="New York"
              // error={Boolean(errors.current_location)}
              // errorText={errors.current_location}
            />
          </FieldWrapper>
        </FormRow>
      </EditForm>
    </Fragment>
  );
};

// ArtworkEditForm.propTypes = {
//     title: PropTypes.string.isRequired,
//     year: PropTypes.oneOfType([
//         PropTypes.number,
//         PropTypes.string,
//     ]),
//     category: PropTypes.number,
//     subCategory: PropTypes.string,
//     height: PropTypes.string,
//     width: PropTypes.string,
//     depth: PropTypes.string,
//     edition: PropTypes.string,
//     status: PropTypes.number,
//     price: PropTypes.string,
//     location: PropTypes.string,
//     metric: PropTypes.number,
//     onChange: PropTypes.func.isRequired,
//     errors: PropTypes.object,
// };

export default ArtworkEditForm;
